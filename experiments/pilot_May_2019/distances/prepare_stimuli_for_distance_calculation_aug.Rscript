#!/usr/bin/env Rscript

# prepare_stimuli_for_distance_calculation.Rscript
#
# Reshape stimulus information file to contain all and only the
# pairs (X-TGT and X-OTH) that need acoustic distance comparisons,
# columns being relabelled with _X -> 1 and _TGT/_OTH -> _2.
# 
# Strips out an odd assortment of columns from the stimulus information
# file. Don't count on the output having all the stimulus information,
# and don't count on it having only the essentials for the distance
# calculation either.
#
# The resulting CSV column headers are in an idiosyncratic dialect of the
# emerging 'standard_format' that we're using in this project.
#
# Author: Ewan Dunbar

`%>%` <- magrittr::`%>%`

ARGS <- commandArgs(TRUE)

# Stimulus information table:
# e.g., "meta_information.csv"
INPUT <- ARGS[1] 

# Folder containing the stimulus source files indicated
# in the stimulus information table in the columns starting with
# "file_" (file_X, file_TGT, file_OTH):
# e.g., "/Users/emd/Science/_data/TIMIT/timit/TIMIT/"
FILE_PREFIX <- paste0(ARGS[2], "/")

# Name of output file 
# e.g., "pairs.csv"
OUTPUT <- ARGS[3]

stimuli <- readr::read_csv(INPUT,
  col_types=readr::cols(
    .default = readr::col_character(),
    onset_TGT = readr::col_double(),
    offset_TGT = readr::col_double(),
    onset_OTH = readr::col_double(),
    offset_OTH = readr::col_double(),
    onset_X = readr::col_double(),
    offset_X = readr::col_double()
  )
)
pairs <- stimuli %>% 
  tidyr::gather(key=KEY, value=VALUE, -tripletid, -CORR_ANS,
                -tidyselect::ends_with("_X")) %>%
  tidyr::extract(KEY, c("COLNAME", "target_other"), "(.*)_(.*)") %>%
  tidyr::spread(COLNAME, VALUE) %>%
  dplyr::rename_all(dplyr::funs(
    stringr::str_replace_all(., "_X", "_1"))) %>%
  dplyr::rename_at(dplyr::vars(-tripletid, -tidyselect::ends_with("_1"),
                               -target_other, -CORR_ANS),
                   dplyr::funs(paste0(., "_2"))) %>%
  dplyr::rename_at(dplyr::vars(-tidyselect::ends_with("_1"),
                               -tidyselect::ends_with("_2")),
                   dplyr::funs(paste0("_", .))) %>%
  dplyr::mutate_at(dplyr::vars(tidyselect::starts_with("file_")),
                   dplyr::funs(paste0(FILE_PREFIX, .)))
readr::write_csv(pairs, OUTPUT)




